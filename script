import os
import xml.etree.ElementTree as ET
import csv
from collections import defaultdict
import math

# Function to parse XML files and aggregate time data
def parse_xml_files(folder_path):
    class_time_data = defaultdict(float)
    for filename in os.listdir(folder_path):
        if filename.endswith(".xml"):
            tree = ET.parse(os.path.join(folder_path, filename))
            root = tree.getroot()
            class_name = root.find("classname").text
            time = float(root.find("time").text)
            class_time_data[class_name] += time
    return class_time_data

# Function to distribute classes into groups based on time
def distribute_into_groups(class_time_data):
    sorted_classes = sorted(class_time_data.items(), key=lambda x: x[1], reverse=True)
    group_count = 5
    groups = [[] for _ in range(group_count)]
    total_time = sum(time for _, time in sorted_classes)
    avg_time_per_group = total_time / group_count

    curr_group = 0
    for class_name, time in sorted_classes:
        groups[curr_group].append((class_name, time))
        if sum(time for _, time in groups[curr_group]) >= avg_time_per_group:
            curr_group += 1

    return groups

# Main function
def main():
    folder_path = "C:\Users\DELL\Downloads\devops-assignment-main\devops-assignment-main\programming\assignment-1"
    class_time_data = parse_xml_files(folder_path)
    groups = distribute_into_groups(class_time_data)

    with open("output.csv", "w", newline="") as csvfile:
        csvwriter = csv.writer(csvfile)
        csvwriter.writerow(["classname", "time", "groupNo"])
        for group_no, group in enumerate(groups):
            for class_name, time in group:
                csvwriter.writerow([class_name, time, group_no + 1])

if __name__ == "__main__":
    main()
